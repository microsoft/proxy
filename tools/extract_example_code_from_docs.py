import os
import re
import sys
from typing import Set

def extract_cpp_code(input_dir: str, output_dir: str, md_rel_path: str) -> None:
    """
    Extract every C++ code block that immediately follows a '## Example'
    header in *input_dir/md_rel_path*.

    • If exactly one block is found, create:
        example_<rel_path_no_ext>.cpp
    • If multiple blocks are found, create:
        example_<rel_path_no_ext>_1.cpp, _2.cpp, …

    Directory separators in *md_rel_path* are replaced by '_' so the output
    lives flat inside *output_dir*.
    """
    md_path = os.path.join(input_dir, md_rel_path)
    with open(md_path, "r", encoding="utf-8") as f:
        content = f.read()

    pattern = r"## Example\r?\n\r?\n```cpp\r?\n(.*?)\r?\n```"
    code_blocks = re.findall(pattern, content, re.DOTALL)
    if len(code_blocks) == 0:
        return  # No match, skip

    rel_base = os.path.splitext(md_rel_path)[0].replace(os.sep, "_")
    if len(code_blocks) == 1:
        targets = [os.path.join(output_dir, f"example_{rel_base}.cpp")]
    else:
        targets = [
            os.path.join(output_dir, f"example_{rel_base}_{i}.cpp")
            for i in range(1, len(code_blocks) + 1)
        ]

    header = f"// This file was auto-generated from: {md_path}\n// Do not edit this file manually.\n\n"
    for cpp_path, cpp_code in zip(targets, code_blocks):
        with open(cpp_path, "w", encoding="utf-8") as out:
            out.write(header)
            out.write(cpp_code)

def main():
    if len(sys.argv) < 3:
        print("Usage: python extract_example_code_from_docs.py <input_dir> <output_dir> [exclusion ...]")
        sys.exit(1)

    input_dir = sys.argv[1]
    output_dir = sys.argv[2]
    exclusions: Set[str] = {os.path.normpath(p) for p in sys.argv[3:]}

    for root, _, files in os.walk(input_dir):
        for file in files:
            if not file.endswith('.md'):
                continue
            md_path = os.path.join(root, file)
            rel_path = os.path.relpath(md_path, input_dir)
            if rel_path in exclusions:
                continue
            extract_cpp_code(input_dir, output_dir, rel_path)

if __name__ == '__main__':
    main()
